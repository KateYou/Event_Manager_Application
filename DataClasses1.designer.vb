'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database1")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEMEvent(instance As EMEvent)
    End Sub
  Partial Private Sub UpdateEMEvent(instance As EMEvent)
    End Sub
  Partial Private Sub DeleteEMEvent(instance As EMEvent)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.EventManager.My.MySettings.Default.Database1ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Facilities() As System.Data.Linq.Table(Of Facility)
		Get
			Return Me.GetTable(Of Facility)
		End Get
	End Property
	
	Public ReadOnly Property Vendors() As System.Data.Linq.Table(Of Vendor)
		Get
			Return Me.GetTable(Of Vendor)
		End Get
	End Property
	
	Public ReadOnly Property EMEvents() As System.Data.Linq.Table(Of EMEvent)
		Get
			Return Me.GetTable(Of EMEvent)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertEvents")>  _
	Public Function InsertEvents(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EventName", DbType:="VarChar(50)")> ByVal eventName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EventLocation", DbType:="VarChar(50)")> ByVal eventLocation As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartTime", DbType:="VarChar(50)")> ByVal startTime As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndTime", DbType:="VarChar(50)")> ByVal endTime As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventName, eventLocation, startTime, endTime)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Facilities")>  _
Partial Public Class Facility
	
	Private _FName As String
	
	Private _FAddress As String
	
	Private _FCity As String
	
	Private _FZip As String
	
	Private _FState As String
	
	Private _FContact As String
	
	Private _FPhone As String
	
	Private _FFax As String
	
	Private _FTaxID As String
	
	Private _FNotes As String
	
	Private _Attachments As System.Data.Linq.Binary
	
	Private _FWebsite As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FName() As String
		Get
			Return Me._FName
		End Get
		Set
			If (String.Equals(Me._FName, value) = false) Then
				Me._FName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAddress", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FAddress() As String
		Get
			Return Me._FAddress
		End Get
		Set
			If (String.Equals(Me._FAddress, value) = false) Then
				Me._FAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FCity() As String
		Get
			Return Me._FCity
		End Get
		Set
			If (String.Equals(Me._FCity, value) = false) Then
				Me._FCity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FZip", DbType:="NChar(10)")>  _
	Public Property FZip() As String
		Get
			Return Me._FZip
		End Get
		Set
			If (String.Equals(Me._FZip, value) = false) Then
				Me._FZip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FState", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
	Public Property FState() As String
		Get
			Return Me._FState
		End Get
		Set
			If (String.Equals(Me._FState, value) = false) Then
				Me._FState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FContact", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FContact() As String
		Get
			Return Me._FContact
		End Get
		Set
			If (String.Equals(Me._FContact, value) = false) Then
				Me._FContact = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FPhone", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property FPhone() As String
		Get
			Return Me._FPhone
		End Get
		Set
			If (String.Equals(Me._FPhone, value) = false) Then
				Me._FPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFax", DbType:="NChar(10)")>  _
	Public Property FFax() As String
		Get
			Return Me._FFax
		End Get
		Set
			If (String.Equals(Me._FFax, value) = false) Then
				Me._FFax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FTaxID", DbType:="VarChar(50)")>  _
	Public Property FTaxID() As String
		Get
			Return Me._FTaxID
		End Get
		Set
			If (String.Equals(Me._FTaxID, value) = false) Then
				Me._FTaxID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FNotes", DbType:="VarChar(MAX)")>  _
	Public Property FNotes() As String
		Get
			Return Me._FNotes
		End Get
		Set
			If (String.Equals(Me._FNotes, value) = false) Then
				Me._FNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attachments", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Attachments() As System.Data.Linq.Binary
		Get
			Return Me._Attachments
		End Get
		Set
			If (Object.Equals(Me._Attachments, value) = false) Then
				Me._Attachments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FWebsite", DbType:="VarChar(50)")>  _
	Public Property FWebsite() As String
		Get
			Return Me._FWebsite
		End Get
		Set
			If (String.Equals(Me._FWebsite, value) = false) Then
				Me._FWebsite = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vendors")>  _
Partial Public Class Vendor
	
	Private _VName As String
	
	Private _VType As String
	
	Private _VAddress As String
	
	Private _VCity As String
	
	Private _VState As String
	
	Private _VZip As String
	
	Private _VContact As String
	
	Private _VPhone As String
	
	Private _VFax As String
	
	Private _VTaxID As String
	
	Private _Notes As String
	
	Private _VInsurance As System.Nullable(Of Integer)
	
	Private _Attachments As System.Data.Linq.Binary
	
	Private _Website As String
	
	Private _CommonCode As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property VName() As String
		Get
			Return Me._VName
		End Get
		Set
			If (String.Equals(Me._VName, value) = false) Then
				Me._VName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VType", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property VType() As String
		Get
			Return Me._VType
		End Get
		Set
			If (String.Equals(Me._VType, value) = false) Then
				Me._VType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VAddress", DbType:="VarChar(50)")>  _
	Public Property VAddress() As String
		Get
			Return Me._VAddress
		End Get
		Set
			If (String.Equals(Me._VAddress, value) = false) Then
				Me._VAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VCity", DbType:="VarChar(50)")>  _
	Public Property VCity() As String
		Get
			Return Me._VCity
		End Get
		Set
			If (String.Equals(Me._VCity, value) = false) Then
				Me._VCity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VState", DbType:="VarChar(50)")>  _
	Public Property VState() As String
		Get
			Return Me._VState
		End Get
		Set
			If (String.Equals(Me._VState, value) = false) Then
				Me._VState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VZip", DbType:="NChar(10)")>  _
	Public Property VZip() As String
		Get
			Return Me._VZip
		End Get
		Set
			If (String.Equals(Me._VZip, value) = false) Then
				Me._VZip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VContact", DbType:="VarChar(50)")>  _
	Public Property VContact() As String
		Get
			Return Me._VContact
		End Get
		Set
			If (String.Equals(Me._VContact, value) = false) Then
				Me._VContact = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VPhone", DbType:="NChar(10)")>  _
	Public Property VPhone() As String
		Get
			Return Me._VPhone
		End Get
		Set
			If (String.Equals(Me._VPhone, value) = false) Then
				Me._VPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VFax", DbType:="NChar(10)")>  _
	Public Property VFax() As String
		Get
			Return Me._VFax
		End Get
		Set
			If (String.Equals(Me._VFax, value) = false) Then
				Me._VFax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VTaxID", DbType:="VarChar(50)")>  _
	Public Property VTaxID() As String
		Get
			Return Me._VTaxID
		End Get
		Set
			If (String.Equals(Me._VTaxID, value) = false) Then
				Me._VTaxID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me._Notes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VInsurance", DbType:="Int")>  _
	Public Property VInsurance() As System.Nullable(Of Integer)
		Get
			Return Me._VInsurance
		End Get
		Set
			If (Me._VInsurance.Equals(value) = false) Then
				Me._VInsurance = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attachments", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Attachments() As System.Data.Linq.Binary
		Get
			Return Me._Attachments
		End Get
		Set
			If (Object.Equals(Me._Attachments, value) = false) Then
				Me._Attachments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="VarChar(50)")>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me._Website = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommonCode", DbType:="VarChar(50)")>  _
	Public Property CommonCode() As String
		Get
			Return Me._CommonCode
		End Get
		Set
			If (String.Equals(Me._CommonCode, value) = false) Then
				Me._CommonCode = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EMEvents")>  _
Partial Public Class EMEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventName As String
	
	Private _EventLocation As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _StartTime As String
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _EndTime As String
	
	Private _Caterer As String
	
	Private _Bar As String
	
	Private _Florist As String
	
	Private _A_V_Rental As String
	
	Private _Installer As String
	
	Private _Attachments As String
	
	Private _Notes As String
	
	Private _CommonCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventNameChanging(value As String)
    End Sub
    Partial Private Sub OnEventNameChanged()
    End Sub
    Partial Private Sub OnEventLocationChanging(value As String)
    End Sub
    Partial Private Sub OnEventLocationChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As String)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As String)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnCatererChanging(value As String)
    End Sub
    Partial Private Sub OnCatererChanged()
    End Sub
    Partial Private Sub OnBarChanging(value As String)
    End Sub
    Partial Private Sub OnBarChanged()
    End Sub
    Partial Private Sub OnFloristChanging(value As String)
    End Sub
    Partial Private Sub OnFloristChanged()
    End Sub
    Partial Private Sub OnA_V_RentalChanging(value As String)
    End Sub
    Partial Private Sub OnA_V_RentalChanged()
    End Sub
    Partial Private Sub OnInstallerChanging(value As String)
    End Sub
    Partial Private Sub OnInstallerChanged()
    End Sub
    Partial Private Sub OnAttachmentsChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentsChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnCommonCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCommonCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property EventName() As String
		Get
			Return Me._EventName
		End Get
		Set
			If (String.Equals(Me._EventName, value) = false) Then
				Me.OnEventNameChanging(value)
				Me.SendPropertyChanging
				Me._EventName = value
				Me.SendPropertyChanged("EventName")
				Me.OnEventNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventLocation", DbType:="VarChar(50)")>  _
	Public Property EventLocation() As String
		Get
			Return Me._EventLocation
		End Get
		Set
			If (String.Equals(Me._EventLocation, value) = false) Then
				Me.OnEventLocationChanging(value)
				Me.SendPropertyChanging
				Me._EventLocation = value
				Me.SendPropertyChanged("EventLocation")
				Me.OnEventLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="VarChar(50)")>  _
	Public Property StartTime() As String
		Get
			Return Me._StartTime
		End Get
		Set
			If (String.Equals(Me._StartTime, value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="VarChar(50)")>  _
	Public Property EndTime() As String
		Get
			Return Me._EndTime
		End Get
		Set
			If (String.Equals(Me._EndTime, value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Caterer", DbType:="VarChar(50)")>  _
	Public Property Caterer() As String
		Get
			Return Me._Caterer
		End Get
		Set
			If (String.Equals(Me._Caterer, value) = false) Then
				Me.OnCatererChanging(value)
				Me.SendPropertyChanging
				Me._Caterer = value
				Me.SendPropertyChanged("Caterer")
				Me.OnCatererChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bar", DbType:="VarChar(50)")>  _
	Public Property Bar() As String
		Get
			Return Me._Bar
		End Get
		Set
			If (String.Equals(Me._Bar, value) = false) Then
				Me.OnBarChanging(value)
				Me.SendPropertyChanging
				Me._Bar = value
				Me.SendPropertyChanged("Bar")
				Me.OnBarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Florist", DbType:="VarChar(50)")>  _
	Public Property Florist() As String
		Get
			Return Me._Florist
		End Get
		Set
			If (String.Equals(Me._Florist, value) = false) Then
				Me.OnFloristChanging(value)
				Me.SendPropertyChanging
				Me._Florist = value
				Me.SendPropertyChanged("Florist")
				Me.OnFloristChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[A/V Rental]", Storage:="_A_V_Rental", DbType:="VarChar(50)")>  _
	Public Property A_V_Rental() As String
		Get
			Return Me._A_V_Rental
		End Get
		Set
			If (String.Equals(Me._A_V_Rental, value) = false) Then
				Me.OnA_V_RentalChanging(value)
				Me.SendPropertyChanging
				Me._A_V_Rental = value
				Me.SendPropertyChanged("A_V_Rental")
				Me.OnA_V_RentalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Installer", DbType:="VarChar(50)")>  _
	Public Property Installer() As String
		Get
			Return Me._Installer
		End Get
		Set
			If (String.Equals(Me._Installer, value) = false) Then
				Me.OnInstallerChanging(value)
				Me.SendPropertyChanging
				Me._Installer = value
				Me.SendPropertyChanged("Installer")
				Me.OnInstallerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attachments", DbType:="VarChar(50)")>  _
	Public Property Attachments() As String
		Get
			Return Me._Attachments
		End Get
		Set
			If (String.Equals(Me._Attachments, value) = false) Then
				Me.OnAttachmentsChanging(value)
				Me.SendPropertyChanging
				Me._Attachments = value
				Me.SendPropertyChanged("Attachments")
				Me.OnAttachmentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(50)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommonCode", DbType:="VarChar(50)")>  _
	Public Property CommonCode() As String
		Get
			Return Me._CommonCode
		End Get
		Set
			If (String.Equals(Me._CommonCode, value) = false) Then
				Me.OnCommonCodeChanging(value)
				Me.SendPropertyChanging
				Me._CommonCode = value
				Me.SendPropertyChanged("CommonCode")
				Me.OnCommonCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
